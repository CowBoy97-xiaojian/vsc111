insert overwrite table ham.dwd_dcslog_event_gio_di partition (dt = '${DT}', hour = '${HH}')
select 
--coalesce(case when regexp(user, '^[0-9]{11}$') then user when regexp(user, '.*==$') then aes_function(user) end, first_value(case when regexp(user, '^[0-9]{11}$') then user when regexp(user, '.*==$') then aes_function(user) end)
coalesce(user, first_value(user, TRUE)
                  OVER (PARTITION BY anonymous_user
                      ORDER BY event_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),'') AS mobile,
anonymous_user AS ck_id,
session AS ss_id,
ip,
parse_ip(ip).prov as ip_prov,
parse_ip(ip).city as ip_city,
attributes['$reffer'] as referer,
decode_url(attributes['WT_event']) AS event,
decode_url(coalesce(split(attributes['WT_es'],'\\?')[0],if(instr(domain,'.')>0,if(regexp(domain,'^[0-9]+[.]+[0-9]+[.]+[0-9]+[.]+[0-9]+$'),concat('http://',coalesce(domain,''),coalesce(attributes['$path'],'')),concat('https://',coalesce(domain,''),coalesce(attributes['$path'],''))),domain))) as url,
decode_url(decode_url(attributes['WT_si_n'])) AS si_n,
decode_url(attributes['WT_si_s']) AS si_s,
decode_url(attributes['WT_si_x']) AS si_x,
decode_url(nvl(nullif(split(attributes['WT_channelid'],'%')[0], ''),nullif(substr(regexp_extract(coalesce(attributes['$query'],parse_url(attributes['WT_es'], 'QUERY'),split(attributes['WT_es'],'\\?')[1]), 'channelId=([0-9a-zA-z]+)', 1),0,12),''))) AS channel_id,
decode_url(substr(nvl(nullif(attributes['WT_pageid'], ''), nullif(regexp_extract(coalesce(attributes['$query'],parse_url(attributes['WT_es'], 'QUERY'),split(attributes['WT_es'],'\\?')[1]), 'pageId=([0-9a-zA-z]+)', 1),'')), 0, 19)) AS page_id,
decode_url(attributes['WT_input_xm']) AS input_xm,
decode_url(attributes['WT_input_sfz']) AS input_sfz,
decode_url(attributes['WT_input_dz']) AS input_dz,
decode_url(attributes['WT_mc_ev']) AS mc_ev,
decode_url(nvl(nullif(attributes['WT_sellerid'], ''), nullif(regexp_extract(coalesce(attributes['$query'],parse_url(attributes['WT_es'], 'QUERY'),split(attributes['WT_es'],'\\?')[1]), 'sellerId=([0-9a-zA-z]+)', 1),''))) AS seller_id,
attributes['WT_last_pageid'] AS last_pageid,
attributes['WT_module_no'] AS module_no,
decode_url(attributes['WT_point_position']) AS point_position,
decode_url(attributes['WT_member']) AS member,
decode_url(attributes['WT_goods_no']) AS goods_no,
attributes['WT_login_status'] AS login_status,
decode_url(attributes['WT_input_dq']) AS input_dq,
decode_url(attributes['WT_input_buymobile']) AS input_buymobile,
date_format(event_time,'yyyy-MM-dd HH:mm:ss') as daytime,
concat(unix_timestamp(client_time, 'yyyy-MM-dd HH:mm:ss.SSS'),split(client_time,'\\.')[1]) as cli_time,
attributes['WT_last_url'] AS last_url,
decode_url(attributes['WT_last_pagename']) AS last_pagename,
attributes['WT_current_url'] AS current_url,
decode_url(attributes['WT_current_pagename']) AS current_pagename,
decode_url(attributes['WT_module_name']) AS module_name,
attributes['WT_next_pageid'] AS next_pageid,
decode_url(attributes['WT_next_url']) AS next_url,
decode_url(attributes['WT_next_pagename']) AS next_pagename,
attributes['WT_component_id'] AS component_id,
decode_url(attributes['WT_input_mobile']) as input_mobile,
attributes['WT_touchcode'] AS touchcode,
attributes['WT_tpl'] AS tpl,
decode_url(attributes['WT_branch']) as branch,
decode_url(concat(if(instr(domain,'.')>0,if(regexp(domain,'^[0-9]+[.]+[0-9]+[.]+[0-9]+[.]+[0-9]+$'),concat('http://',coalesce(domain,''),coalesce(attributes['$path'],'')),concat('https://',coalesce(domain,''),coalesce(attributes['$path'],''))),domain),coalesce(concat('?',attributes['$attributes']),''))) as complete_url,
attributes['WT_point_name'] AS point_name,
attributes['WT_component_name'] AS component_name,
attributes['WT_environment'] AS environment,
decode_url(attributes['WT_plat']) AS plat,
attributes['WT_sku_id'] AS sku_id,
decode_url(attributes['WT_prepare1']) as prepare1,
decode_url(attributes['WT_event_type']) AS event_type,
decode_url(attributes['WT_envName']) AS envName,
decode_url(attributes['WT_errCode']) AS errCode,
decode_url(attributes['WT_errMsg']) AS errMsg,
decode_url(attributes['WT_prov']) AS prov,
decode_url(attributes['WT_city']) AS city,
decode_url(attributes['WT_mc_ev_name']) AS mc_ev_name,
data_source_id as trmnl_style,
'--' AS tbd,
concat(unix_timestamp(client_time, 'yyyy-MM-dd HH:mm:ss.SSS'),split(client_time,'\\.')[1]) AS dcsdat,
decode_url(coalesce(user_agent,'')) as user_agent,
attributes['WT_goods_id'] AS goods_id,
regexp_replace(resolution,'\\*','x') as sr,
attributes['WT_appId'] AS appid,
decode_url(attributes['WT_cid']) as cid,
decode_url(attributes['WT_userBrand']) as userbrand,
decode_url(attributes['WT_loginProvince']) as loginprovince,
decode_url(attributes['WT_loginCity']) as logincity,
attributes['WT_nodeId'] as nodeid,
attributes['WT_tv'] as tv,
attributes['WT_vt_f_tlh'] as vt_f_tlh,
'--' as vtvs,
'--' as mark33,
attributes['$path'] as dcsuri,
decode_url(coalesce(attributes['WT_ti'],attributes['$title'])) as wt_ti,
coalesce(attributes['WT_et'],event_key) as et,--先取开发上传WT_et再取event_key
attributes['WT_markId'] as markid,
attributes['WT_serial_no'] as serial_no,
attributes['WT_act_str_step_id'] as act_str_step_id,
attributes['WT_group_id'] as group_id,
attributes['WT_mr_id'] as mr_id,
attributes['WT_ad_step'] as ad_step,
attributes['WT_touch_tm'] as touch_tm,
attributes['$duration'] as ed,
decode_url(extract_xy(attributes_str)) as xy,
decode_url(attributes['WT_vt_sid']) as vt_sid, 
decode_url(coalesce(attributes['WT_es'],concat(if(instr(domain,'.')>0,if(regexp(domain,'^[0-9]+[.]+[0-9]+[.]+[0-9]+[.]+[0-9]+$'),concat('http://',coalesce(domain,''),coalesce(attributes['$path'],'')),concat('https://',coalesce(domain,''),coalesce(attributes['$path'],''))),domain),coalesce(concat('?',attributes['$query']),'')))) as es,
decode_url(attributes['WT_sellerid']) AS wtsellerid,
--decode_url(split(cast(coalesce(attributes['WT_channelid'],'') as string),'%')[1]) as wtchannelid,
decode_url(attributes['WT_channelid']) as wtchannelid,
decode_url(attributes['WT_pageid']) as wtpageid,
event_id,
user_key,
domain,
device_model,
sdk_version,
location_latitude,
location_longitude,
platform,
os_version,
gio_id,
attributes_str as attributes,
decode_url(attributes['WT_goods_specs']) as wt_goods_specs,
decode_url(attributes['WT_goods_price']) as wt_goods_price
from (
select 
project_id,
event_key,
event_time,
event_id,
event_type,
client_time,
anonymous_user,
--user,
--case when regexp(user, '.*==$') then aes_function(user) else user end as user,
-- 20230919：解决user中有cookie的问题
case when user_key = '$basic_userId' then (case when regexp(user, '.*==$') then aes_function(user) else user end) end as user,
user_key,
gio_id,
merged_gio_id,
session,
str_to_map(regexp_replace(regexp_replace(decode_url(attributes),'\\n+|\\r+|(\\n\\r)+|\\t+|\\|', ''), '^\\{"(.*)"\\}$', '$1'),'\",\"','\":\"') as attributes,
regexp_replace(decode_url(attributes),'\\n+|\\r+|(\\n\\r)+|\\t+|\\|', '') as attributes_str,
package,
platform,
referrer_domain,
utm_source,
utm_medium,
utm_campaign,
utm_term,
utm_content,
traffic_source,
ads_id,
key_word,
country_code,
country_name,
region,
city,
browser,
browser_version,
os,
os_version,
client_version,
channel,
device_brand,
device_model,
device_type,
device_orientation,
resolution,
language,
referrer_type,
account_id,
domain,
ip,
user_agent,
sdk_version,
location_latitude,
location_longitude,
bot_id,
data_source_id,
esid,
dt,
hour
from ham.ods_dcslog_event_gio_all
where dt = '${DT}'
and hour = '${HH}'
and data_source_id in ('aa410d5cd21666f5','a1307114a76cd375','a6381779603b656a','913e6dc4915d470c','8643086d472dea68','82213179b9aea392','aba9de4ce446b2d2','ac81a55cdf7074d5','999264cd2e773538','beb5471c243b2971','b5b9ccb1f69a35b9')
) tb1
;

--51006接口数据融通
insert into table ham.dwd_dcslog_event_gio_di partition (dt = '${DT}', hour = '${HH}')
select 
--coalesce(case when regexp(user, '^[0-9]{11}$') then user when regexp(user, '.*==$') then aes_function(user) end, first_value(case when regexp(user, '^[0-9]{11}$') then user when regexp(user, '.*==$') then aes_function(user) end)
coalesce(user, first_value(user, TRUE)
                  OVER (PARTITION BY anonymous_user
                      ORDER BY event_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING),'') AS mobile,
anonymous_user AS ck_id,
session AS ss_id,
ip,
parse_ip(ip).prov as ip_prov,
parse_ip(ip).city as ip_city,
attributes['$reffer'] as referer,
decode_url(attributes['WT_event']) AS event,
decode_url(coalesce(split(attributes['WT_es'],'\\?')[0],if(instr(domain,'.')>0,if(regexp(domain,'^[0-9]+[.]+[0-9]+[.]+[0-9]+[.]+[0-9]+$'),concat('http://',coalesce(domain,''),coalesce(attributes['$path'],'')),concat('https://',coalesce(domain,''),coalesce(attributes['$path'],''))),domain))) as url,
decode_url(decode_url(attributes['WT_si_n'])) AS si_n,
decode_url(attributes['WT_si_s']) AS si_s,
decode_url(attributes['WT_si_x']) AS si_x,
decode_url(nvl(nullif(split(attributes['WT_channelid'],'%')[0], ''),nullif(substr(regexp_extract(coalesce(attributes['$query'],parse_url(attributes['WT_es'], 'QUERY'),split(attributes['WT_es'],'\\?')[1]), 'channelId=([0-9a-zA-z]+)', 1),0,12),''))) AS channel_id,
decode_url(substr(nvl(nullif(attributes['WT_pageid'], ''), nullif(regexp_extract(coalesce(attributes['$query'],parse_url(attributes['WT_es'], 'QUERY'),split(attributes['WT_es'],'\\?')[1]), 'pageId=([0-9a-zA-z]+)', 1),'')), 0, 19)) AS page_id,
decode_url(attributes['WT_input_xm']) AS input_xm,
decode_url(attributes['WT_input_sfz']) AS input_sfz,
decode_url(attributes['WT_input_dz']) AS input_dz,
decode_url(attributes['WT_mc_ev']) AS mc_ev,
decode_url(nvl(nullif(attributes['WT_sellerid'], ''), nullif(regexp_extract(coalesce(attributes['$query'],parse_url(attributes['WT_es'], 'QUERY'),split(attributes['WT_es'],'\\?')[1]), 'sellerId=([0-9a-zA-z]+)', 1),''))) AS seller_id,
attributes['WT_last_pageid'] AS last_pageid,
attributes['WT_module_no'] AS module_no,
decode_url(attributes['WT_point_position']) AS point_position,
decode_url(attributes['WT_member']) AS member,
decode_url(attributes['WT_goods_no']) AS goods_no,
attributes['WT_login_status'] AS login_status,
decode_url(attributes['WT_input_dq']) AS input_dq,
decode_url(attributes['WT_input_buymobile']) AS input_buymobile,
date_format(event_time,'yyyy-MM-dd HH:mm:ss') as daytime,
concat(unix_timestamp(client_time, 'yyyy-MM-dd HH:mm:ss.SSS'),split(client_time,'\\.')[1]) as cli_time,
attributes['WT_last_url'] AS last_url,
decode_url(attributes['WT_last_pagename']) AS last_pagename,
attributes['WT_current_url'] AS current_url,
decode_url(attributes['WT_current_pagename']) AS current_pagename,
decode_url(attributes['WT_module_name']) AS module_name,
attributes['WT_next_pageid'] AS next_pageid,
decode_url(attributes['WT_next_url']) AS next_url,
decode_url(attributes['WT_next_pagename']) AS next_pagename,
attributes['WT_component_id'] AS component_id,
decode_url(attributes['WT_input_mobile']) as input_mobile,
attributes['WT_touchcode'] AS touchcode,
attributes['WT_tpl'] AS tpl,
decode_url(attributes['WT_branch']) as branch,
decode_url(concat(if(instr(domain,'.')>0,if(regexp(domain,'^[0-9]+[.]+[0-9]+[.]+[0-9]+[.]+[0-9]+$'),concat('http://',coalesce(domain,''),coalesce(attributes['$path'],'')),concat('https://',coalesce(domain,''),coalesce(attributes['$path'],''))),domain),coalesce(concat('?',attributes['$attributes']),''))) as complete_url,
attributes['WT_point_name'] AS point_name,
attributes['WT_component_name'] AS component_name,
attributes['WT_environment'] AS environment,
decode_url(attributes['WT_plat']) AS plat,
attributes['WT_sku_id'] AS sku_id,
decode_url(attributes['WT_prepare1']) as prepare1,
decode_url(attributes['WT_event_type']) AS event_type,
decode_url(attributes['WT_envName']) AS envName,
decode_url(attributes['WT_errCode']) AS errCode,
decode_url(attributes['WT_errMsg']) AS errMsg,
decode_url(attributes['WT_prov']) AS prov,
decode_url(attributes['WT_city']) AS city,
decode_url(attributes['WT_mc_ev_name']) AS mc_ev_name,
data_source_id as trmnl_style,
'--' AS tbd,
concat(unix_timestamp(client_time, 'yyyy-MM-dd HH:mm:ss.SSS'),split(client_time,'\\.')[1]) AS dcsdat,
decode_url(coalesce(user_agent,'')) as user_agent,
attributes['WT_goods_id'] AS goods_id,
regexp_replace(resolution,'\\*','x') as sr,
attributes['WT_appId'] AS appid,
decode_url(attributes['WT_cid']) as cid,
decode_url(attributes['WT_userBrand']) as userbrand,
decode_url(attributes['WT_loginProvince']) as loginprovince,
decode_url(attributes['WT_loginCity']) as logincity,
attributes['WT_nodeId'] as nodeid,
attributes['WT_tv'] as tv,
attributes['WT_vt_f_tlh'] as vt_f_tlh,
'--' as vtvs,
'--' as mark33,
attributes['$path'] as dcsuri,
decode_url(coalesce(attributes['WT_ti'],attributes['$title'])) as wt_ti,
coalesce(attributes['WT_et'],event_key) as et,--先取开发上传WT_et再取event_key
attributes['WT_markId'] as markid,
attributes['WT_serial_no'] as serial_no,
attributes['WT_act_str_step_id'] as act_str_step_id,
attributes['WT_group_id'] as group_id,
attributes['WT_mr_id'] as mr_id,
attributes['WT_ad_step'] as ad_step,
attributes['WT_touch_tm'] as touch_tm,
attributes['$duration'] as ed,
decode_url(extract_xy(attributes_str)) as xy,
decode_url(attributes['WT_vt_sid']) as vt_sid, 
decode_url(coalesce(attributes['WT_es'],concat(if(instr(domain,'.')>0,if(regexp(domain,'^[0-9]+[.]+[0-9]+[.]+[0-9]+[.]+[0-9]+$'),concat('http://',coalesce(domain,''),coalesce(attributes['$path'],'')),concat('https://',coalesce(domain,''),coalesce(attributes['$path'],''))),domain),coalesce(concat('?',attributes['$query']),'')))) as es,
decode_url(attributes['WT_sellerid']) AS wtsellerid,
--decode_url(split(cast(coalesce(attributes['WT_channelid'],'') as string),'%')[1]) as wtchannelid,
decode_url(attributes['WT_channelid']) as wtchannelid,
decode_url(attributes['WT_pageid']) as wtpageid,
event_id,
user_key,
domain,
device_model,
sdk_version,
location_latitude,
location_longitude,
platform,
os_version,
gio_id,
attributes_str as attributes,
decode_url(attributes['WT_goods_specs']) as wt_goods_specs,
decode_url(attributes['WT_goods_price']) as wt_goods_price
from (
select 
project_id,
event_key,
event_time,
event_id,
event_type,
client_time,
anonymous_user,
--user,
--case when regexp(user, '.*==$') then aes_function(user) else user end as user,
-- 20230919：解决user中有cookie的问题
case when user_key = '$basic_userId' then (case when regexp(user, '.*==$') then aes_function(user) else user end) end as user,
user_key,
gio_id,
merged_gio_id,
session,
str_to_map(regexp_replace(regexp_replace(decode_url(attributes),'\\n+|\\r+|(\\n\\r)+|\\t+|\\|', ''), '^\\{"(.*)"\\}$', '$1'),'\",\"','\":\"') as attributes,
regexp_replace(decode_url(attributes),'\\n+|\\r+|(\\n\\r)+|\\t+|\\|', '') as attributes_str,
package,
platform,
referrer_domain,
utm_source,
utm_medium,
utm_campaign,
utm_term,
utm_content,
traffic_source,
ads_id,
key_word,
country_code,
country_name,
region,
city,
browser,
browser_version,
os,
os_version,
client_version,
channel,
device_brand,
device_model,
device_type,
device_orientation,
resolution,
language,
referrer_type,
account_id,
domain,
ip,
user_agent,
sdk_version,
location_latitude,
location_longitude,
bot_id,
data_source_id,
esid,
dt,
hour
from ham_jituan.ods_client_event_gio_all
where dt = '${DT}'
and hour = '${HH}'
and data_source_id in ('a1f48d9ff4f42571','b508a809cbbddd0b')
and event_type = 'custom_event'
)tb1
;

-- 51010gio数据
insert into table ham.dwd_dcslog_event_gio_di partition (dt = '${DT}', hour = '${HH}')
select 
--case when regexp(user, '^[0-9]{11}$') then user when regexp(user, '.*==$') then aes_function(user) end AS mobile,
user AS mobile,
anonymous_user AS ck_id,
session AS ss_id,
ip,
parse_ip(ip).prov as ip_prov,
parse_ip(ip).city as ip_city,
attributes['$reffer'] as referer,
decode_url(attributes['WT_event']) AS event,
decode_url(coalesce(split(attributes['WT_es'],'\\?')[0],if(instr(domain,'.')>0,if(regexp(domain,'^[0-9]+[.]+[0-9]+[.]+[0-9]+[.]+[0-9]+$'),concat('http://',coalesce(domain,''),coalesce(attributes['$path'],'')),concat('https://',coalesce(domain,''),coalesce(attributes['$path'],''))),domain))) as url,
decode_url(decode_url(attributes['WT_si_n'])) AS si_n,
decode_url(attributes['WT_si_s']) AS si_s,
decode_url(attributes['WT_si_x']) AS si_x,
decode_url(nvl(nullif(split(attributes['WT_channelid'],'%')[0], ''),nullif(substr(regexp_extract(coalesce(attributes['$query'],parse_url(attributes['WT_es'], 'QUERY'),split(attributes['WT_es'],'\\?')[1]), 'channelId=([0-9a-zA-z]+)', 1),0,12),''))) AS channel_id,
decode_url(substr(nvl(nullif(attributes['WT_pageid'], ''), nullif(regexp_extract(coalesce(attributes['$query'],parse_url(attributes['WT_es'], 'QUERY'),split(attributes['WT_es'],'\\?')[1]), 'pageId=([0-9a-zA-z]+)', 1),'')), 0, 19)) AS page_id,
decode_url(attributes['WT_input_xm']) AS input_xm,
decode_url(attributes['WT_input_sfz']) AS input_sfz,
decode_url(attributes['WT_input_dz']) AS input_dz,
decode_url(attributes['WT_mc_ev']) AS mc_ev,
decode_url(nvl(nullif(attributes['WT_sellerid'], ''), nullif(regexp_extract(coalesce(attributes['$query'],parse_url(attributes['WT_es'], 'QUERY'),split(attributes['WT_es'],'\\?')[1]), 'sellerId=([0-9a-zA-z]+)', 1),''))) AS seller_id,
attributes['WT_last_pageid'] AS last_pageid,
attributes['WT_module_no'] AS module_no,
decode_url(attributes['WT_point_position']) AS point_position,
decode_url(attributes['WT_member']) AS member,
decode_url(attributes['WT_goods_no']) AS goods_no,
attributes['WT_login_status'] AS login_status,
decode_url(attributes['WT_input_dq']) AS input_dq,
decode_url(attributes['WT_input_buymobile']) AS input_buymobile,
date_format(event_time,'yyyy-MM-dd HH:mm:ss') as daytime,
concat(unix_timestamp(client_time, 'yyyy-MM-dd HH:mm:ss.SSS'),split(client_time,'\\.')[1]) as cli_time,
attributes['WT_last_url'] AS last_url,
decode_url(attributes['WT_last_pagename']) AS last_pagename,
attributes['WT_current_url'] AS current_url,
decode_url(attributes['WT_current_pagename']) AS current_pagename,
decode_url(attributes['WT_module_name']) AS module_name,
attributes['WT_next_pageid'] AS next_pageid,
decode_url(attributes['WT_next_url']) AS next_url,
decode_url(attributes['WT_next_pagename']) AS next_pagename,
attributes['WT_component_id'] AS component_id,
decode_url(attributes['WT_input_mobile']) as input_mobile,
attributes['WT_touchcode'] AS touchcode,
attributes['WT_tpl'] AS tpl,
decode_url(attributes['WT_branch']) as branch,
decode_url(coalesce(attributes['WT_es'],concat(if(instr(domain,'.')>0,if(regexp(domain,'^[0-9]+[.]+[0-9]+[.]+[0-9]+[.]+[0-9]+$'),concat('http://',coalesce(domain,''),coalesce(attributes['$path'],'')),concat('https://',coalesce(domain,''),coalesce(attributes['$path'],''))),domain),coalesce(concat('?',attributes['$query']),'')))) as complete_url,
attributes['WT_point_name'] AS point_name,
attributes['WT_component_name'] AS component_name,
attributes['WT_environment'] AS environment,
decode_url(attributes['WT_plat']) AS plat,
attributes['WT_sku_id'] AS sku_id,
decode_url(attributes['WT_prepare1']) as prepare1,
decode_url(attributes['WT_event_type']) AS event_type,
decode_url(attributes['WT_envName']) AS envName,
decode_url(attributes['WT_errCode']) AS errCode,
decode_url(attributes['WT_errMsg']) AS errMsg,
decode_url(attributes['WT_prov']) AS prov,
decode_url(attributes['WT_city']) AS city,
decode_url(attributes['WT_mc_ev_name']) AS mc_ev_name,
data_source_id as trmnl_style,
'--' AS tbd,
concat(unix_timestamp(client_time, 'yyyy-MM-dd HH:mm:ss.SSS'),split(client_time,'\\.')[1]) AS dcsdat,
decode_url(coalesce(user_agent,'')) as user_agent,
attributes['WT_goods_id'] AS goods_id,
regexp_replace(resolution,'\\*','x') as sr,
attributes['WT_appId'] AS appid,
decode_url(attributes['WT_cid']) as cid,
decode_url(attributes['WT_userBrand']) as userbrand,
decode_url(attributes['WT_loginProvince']) as loginprovince,
decode_url(attributes['WT_loginCity']) as logincity,
attributes['WT_nodeId'] as nodeid,
attributes['WT_tv'] as tv,
attributes['WT_vt_f_tlh'] as vt_f_tlh,
'--' as vtvs,
'--' as mark33,
attributes['$path'] as dcsuri,
decode_url(coalesce(attributes['WT_ti'],attributes['$title'])) as wt_ti,
coalesce(attributes['WT_et'],event_key) as et,--先取开发上传WT_et再取event_key
attributes['WT_markId'] as markid,
attributes['WT_serial_no'] as serial_no,
attributes['WT_act_str_step_id'] as act_str_step_id,
attributes['WT_group_id'] as group_id,
attributes['WT_mr_id'] as mr_id,
attributes['WT_ad_step'] as ad_step,
attributes['WT_touch_tm'] as touch_tm,
attributes['$duration'] as ed,
decode_url(extract_xy(attributes_str)) as xy,
--11.28 decode_url(attributes['WT_vt_sid'])  --更改为  session
decode_url(attributes['WT_vt_sid']) as vt_sid,
decode_url(coalesce(attributes['WT_es'],concat(if(instr(domain,'.')>0,if(regexp(domain,'^[0-9]+[.]+[0-9]+[.]+[0-9]+[.]+[0-9]+$'),concat('http://',coalesce(domain,''),coalesce(attributes['$path'],'')),concat('https://',coalesce(domain,''),coalesce(attributes['$path'],''))),domain),coalesce(concat('?',attributes['$query']),'')))) as es,
decode_url(attributes['WT_sellerid']) AS wtsellerid,
--decode_url(split(cast(coalesce(attributes['WT_channelid'],'') as string),'%')[1]) as wtchannelid,
decode_url(attributes['WT_channelid']) as wtchannelid,
decode_url(attributes['WT_pageid']) as wtpageid,
event_id,
user_key,
domain,
device_model,
sdk_version,
location_latitude,
location_longitude,
platform,
os_version,
gio_id,
attributes_str as attributes,
decode_url(attributes['WT_goods_specs']) as wt_goods_specs,
decode_url(attributes['WT_goods_price']) as wt_goods_price
from (
select 
project_id,
event_key,
event_time,
event_id,
event_type,
client_time,
anonymous_user,
--user,
--case when regexp(user, '.*==$') then aes_function(user) else user end as user,
-- 20230919：解决user中有cookie的问题
case when user_key = '$basic_userId' then (case when regexp(user, '.*==$') then aes_function(user) else user end) end as user,
user_key,
gio_id,
merged_gio_id,
session,
str_to_map(regexp_replace(regexp_replace(decode_url(attributes),'\\n+|\\r+|(\\n\\r)+|\\t+|\\|', ''), '^\\{"(.*)"\\}$', '$1'),'\",\"','\":\"') as attributes,
regexp_replace(decode_url(attributes),'\\n+|\\r+|(\\n\\r)+|\\t+|\\|', '') as attributes_str,
package,
platform,
referrer_domain,
utm_source,
utm_medium,
utm_campaign,
utm_term,
utm_content,
traffic_source,
ads_id,
key_word,
country_code,
country_name,
region,
city,
browser,
browser_version,
os,
os_version,
client_version,
channel,
device_brand,
device_model,
device_type,
device_orientation,
resolution,
language,
referrer_type,
account_id,
domain,
ip,
user_agent,
sdk_version,
location_latitude,
location_longitude,
bot_id,
data_source_id,
esid,
dt,
hour
from ham.ods_dcslog_event_gio_all
where dt = '${DT}'
and hour = '${HH}'
and data_source_id in ('aae6afbf8823b1c1','a797613d647af6c6','a7464be8b200fe24','b9e74b9d5da046ce','b87eb8cec01051a6','b098587a3af15a25','b23efeab1461679b','a10b1f67c7d288c1','ae2308d5a08258b6','a04f0ad9925c080f','a6ba03d6884ee1c1','aa3a7b170aa41eed','a441e7427a44d390','adae9b8274a853f1','ad2e89b1010aed1e','bfe72e945deea64f','81ebc780373ee7cd','8d5d4407d1c3f6bf','abd580f08cf381e0','ba81a7647a8bed5d','8c19b47f237e28d3','a609de73d1690c0e','9c294cf845907ac1','b0839305cf5d280d','9a238b92b6612604','afdbd0f6b9a7ba30','8273883304ad70fb','86fdf7160c5cc8cc','81fab8d01c17ee89','89e7161d4a6b817f','9b50668a016469ec','bda85eeb52fb8b87','a8c29f7abfd639b4','b8d9fd437de471e4','875444ff6e049f33','853d176d98834573')
) tb1
;
